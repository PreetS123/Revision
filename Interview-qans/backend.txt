  //////////////////Node.js ///////////////////////////////////////////////
      
     Q1.Difference between node.js and javaScript ?
      JavaScript---->1. JavaScript is a programming language that is used for writting scripts on a website.
                     2. JavaScript is a upgraded version of ECMAScipt that uses V8 engine written in C++.
                     3. JavaScript can only run in a browser.
                     4. It is basically used as client side.
                     5. It is used for frontend development.
                     6. JavaScript is capable enough to add HTML tags and play with DOM.
                      

      Node.js------>1. Node.js is a javaScript runtime environment.
                    2. Node.js is written on C,C++, and javaScript.
                    3. Node.js helps javaScript to run outside the browser.
                    4. Node.js is mostly used on server side.
                    5. Node.js is used for backend development.
                    6. Node.js connot add HTML tags.
      

      What is middleware in React.js?
      Middleware is a function between request and response with a certain logic to execute the next function.
      
      Middleware is any software that acts like glue between an application and its network.
      It controls the flow of information between an application and the server, database and operating system.

      Q2.What is node.js?
        Node.js is an open-sourse backend , javaScript runt-time environment.
        Node.js is written on C,C++, and javaScript.
        Node.js helps javaScript to run outside the browser.
        Node.js is mostly used for server-side web development.
        Node.js is scalable, light-weight and effecient in nature.

      Q3.List down the major benefits of using Node.js?
      1. It is very simple to learn and run.
      2. It is used to run asynchronous programming.
      3. It is higly scalable in natue.
      4. It is single threaded.
      
      When to use Node.js?
      1.real-time-application.
      2. where scalability is at higher priority.
      3.Collabrative tools
      4. Data Streaming application

      Q4. Why node.js is single threaded?
      Node.js is single threaded in order to perform asynchronous programming.
      With asynchronous processing , an application can perform better and is more scalable under web loads.

      Q5. How do Node.js works?

      It works on single threaded event loop and a non blocking I/O which provides high rate as it can handle 
      higher number of concurrent request.
      By making use of 'HTTP' module, Node.js can run on any stand-alone web server.

      Non-blocking I/o: Non-blocking i/o  means working with multiple requests without blocking the thread for a single request. 
      I/O basically interacts with external systems such as files, databases.
       Node.js is not used for CPU-intensive work means for calculations, video processing because a single thread cannot handle the CPU works.

       Asynchronous: Asynchronous is executing a callback function. 
       The moment we get the response from the other server or database it will execute a callback function.
        Callback functions are called as soon as some work is finished and this is because the node.js uses an event-driven architecture. 
       The single thread doesn’t work with the request instead it sends the request
        to another system which resolves the request and it is accessible for another request.

        Event loop: The event loop contains a single thread and is responsible for handling easy tasks like executing callbacks and network I/O.
         When the program is to initialize all the top-level code is executed, the code is not in the callback function.
          All the applications code that is inside callback functions will run in the event loop.
         EventLoop is the heart of node.js.
          When we start our node application the event loop starts running right away.
           Most of the work is done in the event loop.

           Thread pool: Though node.js is single-threaded it internally maintains a thread pool. 
           When non-blocking requests are accepted there are processed in an event loop, 
           but while accepting blocking requests it checks for available threads in a thread pool,
            assigns a thread to the client’s request which is then processed and send back to the event loop, 
            and response is sent to the respective client.

      Q6.Where Node.js can be used?
       1. Real-Time Web Applications
       2. Distributed System.
       3. Network application 
       4. General purpose application.

       Q7. How many types of API functions are there in Node.js?
        There are two types of API functions in Node.js:
        Asynchronous, non-blocking functions.
        Synchronous, blocking functions.

      Q8. What is the difference between Asynchronous and Non-blocking?
         
         Asynchronous-----> Using these we can make asynchronous HTTP request that do not 
                                wait for the server to respond.
                           These functions continue to respond to the request for which 
                               it has already received the server response.

         Non-Blocking ------> NOn blocking functions are used in regards with I/O operations.
                              They immediatly respond with whatever data is available and
                                  keeps on running as per the request.


      Q9. What is package.json?
          It is basically the manifest file that contains the metaData of the project
           where we define the properties of a pacakage.


      Q10. Explain the concepts of URL module.
        The URL module in node.js provides various utilities for URL resolutions and parsing.
        It is a built-in module that helps in splitting up the web address into a readable format.
        
       Q11. What is the difference between Blocking and Non-Blocking in Node.js?
        Blocking---> It refers to the blocking of further operations until the current operation is finished.
                     It get executed synchronously means that the code would be executed line by line.
                     In it programm wait until the called function or operation returns.

        Non-Blocking-----> It doesn’t block the execution of further operation.
                            Here program get executed asynchronously means that the program mynot execute line by line.
                            In it programm calls the function and move to the nexxt operation that doesn’t wait for 
                            the previous function to return.
                                
      
    Q12. What is a difference between framework and library?
    Ans--> 
    FrameWork--->1.It comprises of lot of APIs, compilers, support programs, libraries etc.
                 2.It is difficult to replace frameworks.
                 3.A framework development requires a lot of code that decrese
                    performance and increase the load time.
                  4.Including framework smoothly into an existing project is impossible.
                 5. Its example are AngularJS, Spring, NodeJS, etc.
    
    Library---> 1.It is a collection of helper modules , classes , objects , functions , pre-written code , etc.
                2. A library is easy to be replaced with another library.
                3.Building a library requires less code , so there is better performance and fast load time.
                4. Libraries can be integrated easily into existing projects to add some specific functionality.
                5.Its example are JQuery , React JS , etc. 

  Q13) What is Multer in node?

     Multer is a node.js middleware for handling multipart/form-data,
     which is primarily used for uploading files. 
      It is written on top of busboy for maximum efficiency.

  Q14) What are different modules of node.js ?
       http--> creates an HTTP server in Node.js
       assert--> set of assertion functions usefull for testing.
       fs--> used to handle file system.
       path--> includes methods to deal with file path
       process--> provides information and control about the current Node.js process.
       os--> provides information about the operatiing system.
       querystring--> utility used for parsing and formatting url querry strings.
       url--> module provides utilities for URL resolution and parsing.

                    /////////////////////////////  Express   ////////////////////////////////

                    Express is fast and essential web framework of Node.Js. We can assume express as a layer
                    built on the top of the Node.js that helps manage a server and routes. It provides a
                     robust set of features to devlop web and mobile application.

       Express.js is a small framework that works on top of Node.js web server functionality to simplify its APIs and add helpful new features.
       It makes it easier to organize your application’s functionality with middleware and routing.
       It adds helpful utilities to Node.js HTTP objects and facilitates the rendering of dynamic HTTP objects.



 //////////////////////////////////////////////////////////
 How do you manage packages in your node.js project?
 Generally we use npm to manage a number of package installers.
 To maintain versions of libs being installed in a projects we use package.json and package-lock.json
 so that there is no issue in porting that app into different environment.

 ///////////////////////////////////////////////////////
 What is REPL?
 read,eval.print,loop which further mean evaluating the code and go on.
 It is also known as node-shell in javaScript.

 ///////////////////////////////////////////////////////////
 What is the purpose of module.exports?
 This is used to expose functions of a particular module or file to be used elsewhere in the projects.

 ///////////////////////////////////////////////////
 What are node.js streams?
 Streams are instances of EventEmmitter which can be used to work with streaming data in node.js.
 There are mainly four types of the stream:
 Writable:streams to which data con be read.(fs.createWriteStream())
 Readable:streams from which data can be read.(fs.createReadStream())
 Duplex:streams that both Readable and Writable.(net.Socket)
 Transform: Duplex streams that can be modify or transform the data as it is written and read.(zlib.createDeflate())

 ////////////////////////////////////////////////////////////
 What are node.js buffers?
 In general, buffers is a temporary memory that is mainly used by stream to hold on some data until consumed.


  /////////////////////////////////////////////////////////////////
  What is JWT?
  A JSON web token(JWT) is JSON Object which is used to securely transfer information over the web(between two parties).
  It can be used for an authentication system and can also be used for information exchange.
  The token is mainly composed of header, payload, signature. 

  ////////////////////////////////////Node.JS////////////////////////////////////////

  Q). What Is Body-parser?
ANS---> 1). Body-parser parses is an HTTP request body that usually helps when you need to know more than just the URL being hit.
        2). Specifically in the context of a POST, PATCH, or PUT HTTP request where the information you want is contained in the body.
        3). Using body-parser allows you to access req.body from within routes and use that data.
        4). For example: To create a user in a database.
Q). Synthetic event??
ANS-->    synthetic event system, which is a cross-browser wrapper around the browser's native event.
          Another benefit is that it increases the performance of the application as React reuses
          the event object.
          EXAMPLE-->  function handleSubmit = (e) =>{
            e.preventDefault();
            console.log('you clicked the submit button)
          }
          return(
            <form onSubmit = {handleSubmit}>
            </form>
          )
Q).  What is NPM ?
ans-->  NPM stands for Node Package Manager, responsible for managing all
        the packages and modules for Node.js.
Q).  What are the modules in Node.js?
Ans--> Modules are like JavaScript libraries that can be used in a Node.js
application to include a set of functions. To include a module in a Node.js
 application, use the require() function with the parentheses containing
 the module's name.
 Core Modules
1). HTTP
Includes classes, methods, and events to create a Node.js HTTP server
2). util
Includes utility functions useful for developers
3). fs
Includes events, classes, and methods to deal with file I/O operations
4). url
Includes methods for URL parsing
5). query string
Includes methods to work with query string
6). stream
Includes methods to handle streaming data
7). zlib
Includes methods to compress or decompress files
Q). What is the purpose of the module .Exports?
Ans--> In Node.js, a module encapsulates all related
codes into a single unit of code that can be parsed
by moving all relevant functions into a single file.
You may export a module with the module and export the function,
which lets it be imported into another file with a needed keyword.
Q). What is the command used to import external libraries?
Ans--> The “require” command is used for importing external libraries.
For example - “var http=require (“HTTP”).”  This will load the HTTP
library and the single exported object through the HTTP variable.
Q). What is an Event Loop in Node.js?
Ans--> Event loops handle asynchronous callbacks in Node.js. It is the
foundation of the non-blocking input/output in Node.js, making it one of
the most important environmental features.
Q).  What are the two types of API functions in Node.js?
Ans--> The two types of API functions in Node.js are:
Asynchronous, non-blocking functions
Synchronous, blocking functions
Q). What are streams in Node.js?
Ans--> Streams are objects that enable you to read data or write data
continuously.
There are four types of streams:
Readable – Used for reading operations.
Writable − Used for write operations.
Duplex − Can be used for both reading and write operations.
Transform − A type of duplex stream where the output is computed based on
input.